pipeline {
  options {
      timeout(time: 30, unit: 'MINUTES')
    }
    agent {
        label 'master'
    }
    stages {
        stage ('Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/ystroog/devops.git']]])
                    CurrentVersion = sh script:"git tag | sort -r | head -1", returnStdout: true
					sh 'cat CurrentVersion'
                    CurrentVersion = CurrentVersion.trim()
					sh 'cat CurrentVersion'
                    nextVersion = CurrentVersion + 1
                    commitIDshort = sh script:"git rev-parse HEAD | cut -c1-10", returnStdout: true
                    BuildVersion = "${CurrentVersion}_${commitIDshort}"
					sh 'cat BuildVersion'
					}
                }
            }
        }
        stage ('Unit Test') {
            steps {
                script {
                    dir ('./cicd') {
                        try {
                            sh 'python ExperimentTests.py'
                        }    catch (err) {
                            println("Unit Test failed for ${BuildVersion}")
                            currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
		stage ('Build and push an Image') {
            steps {
                script {
                    //sh "docker login --username=ystrogo --password=zaq12wsx --email=ystrogo@gmail.com"
					DockerImage = sh script: "docker build . -t  experiment:${BuildVersion}"
					sh 'cat DockerImage'
					docker.withRegistry( '', registryCredential )
					DockerImage.push()
					sh "docker push ystrogo/helloworld/experiment:${BuildVersion}"
					sh "docker save experiment:${BuildVersion} > experiment:${BuildVersion}.tar"
                }
            }
        }
		stage('Get ip from user') {
            steps {
                dir ('elastic_centos/'){
                script { 
                targetIP = input(
                            id: 'userInput', message: 'ip add',
                            parameters: [
                                string(defaultValue: '10.0.0.32',
                                       description: 'ip address',
                                       name: 'IP')])
                    }
				}
			}
		}
		stage ('Pull the image') {
            steps {
                script {
                    sh "docker login --username=ystrogo --email=ystrogo@gmail.com"
					sh "docker load --input helloworld/experiment:${BuildVersion}.tar"
                }
            }
        }
		stage('Ansible Playbokk running') {
            steps {
	    	dir ('cicd/'){
				sh 'ls'
				sh 'cat hosts'
                sh "sed -i 's/host_ip/${targetIP}/g' hosts"
                sh 'cat hosts'
                sh "ansible-playbook -i hosts  -u root -b --private-key=/var/jenkins_home/ansible/id_rsa main.yml"
				}
            }
        }     
		
    }
}