pipeline {
  options {
      timeout(time: 30, unit: 'MINUTES')
    }
    agent none 
    stages {
        stage ('Checkout') {
		    agent {
				label 'master'
			}
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '2bc910d2-09ff-4eec-a53f-d05892b35bc7', url: 'https://github.com/ystroog/devops.git']]])
                    CurrentVersion = sh script:"git tag | sort -r | head -1", returnStdout: true
                    CurrentVersion = CurrentVersion.trim()
                    nextVersion = CurrentVersion + 1
                    commitIDshort = sh script:"git rev-parse HEAD | cut -c1-10", returnStdout: true
                    BuildVersion = "${CurrentVersion}_${commitIDshort}"
                }
            }
        }
        stage ('Unit Test') {
			agent {
				label 'master'
			}
            steps {
                script {
                    dir ('cicd') {
                        try {
                            sh 'python ExperimentTests.py'
                        } catch (err) {
                            println("Unit Test failed for ${BuildVersion}")
                            currentBuild.result = 'UNSTABLE'
                        }
						stash includes: '*', name: 'files', useDefaultExcludes: false
                    }
                }
            }
        }
		stage('build') {
			agent {
				label 'myagent'
			}
			steps {
				dir ('cicd') {	
				unstash 'files'
				sh "docker build . -t  experiment:${BuildVersion}"
				}	
			}

		}
			// credentialsId here is the credentials you have set up in Jenkins for pushing
			// to that repository using username and password.
			//withCredentials([usernamePassword(credentialsId: 'git-pass-credentials-ID', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
				//sh("git tag -a some_tag -m 'Jenkins'")
				//sh('git push https://${GIT_USERNAME}:${GIT_PASSWORD}@<REPO> --tags')
			//}

			// For SSH private key authentication, try the sshagent step from the SSH Agent plugin.
			//sshagent (credentials: ['git-ssh-credentials-ID']) {
				//sh("git tag -a some_tag -m 'Jenkins'")
				//sh('git push <REPO> --tags')
		
		
		stage('tag build'){
			agent {
				label 'master'
			}
			steps {
				script {
					withCredentials([usernamePassword(credentialsId: '2bc910d2-09ff-4eec-a53f-d05892b35bc7', passwordVariable: 'Zaq13edc#', usernameVariable: 'ystroog')]) {
					dir('cicd'){
						sh """
							git config user.email ystrogo@gmail.com
							git config user.name ystroog
							git tag ${BuildVersion} -m "Tag from python nodule"
							git push https://ystroog:Zaq13edc#@github.com/ystroog/devops.git ${BuildVersion}
						"""	
					}	
				}
			}
		}
	}
}