pipeline {
  options {
      timeout(time: 30, unit: 'MINUTES')
    }
    agent none 
    stages {
        stage ('Checkout') {
		    agent {
				label 'master'
			}
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '2bc910d2-09ff-4eec-a53f-d05892b35bc7', url: 'https://github.com/ystroog/devops.git']]])
                    CurrentVersion = sh script:"git tag | sort -r | head -1", returnStdout: true
                    CurrentVersion = CurrentVersion.trim()
                    nextVersion = CurrentVersion + 1
                    commitIDshort = sh script:"git rev-parse HEAD | cut -c1-10", returnStdout: true
                    BuildVersion = "${CurrentVersion}_${commitIDshort}"
                }
            }
        }
        stage ('Unit Test') {
			agent {
				label 'master'
			}
            steps {
                script {
                    dir ('cicd') {
                        try {
                            sh 'python ExperimentTests.py'
                        } catch (err) {
                            println("Unit Test failed for ${BuildVersion}")
                            currentBuild.result = 'UNSTABLE'
                        }
						stash includes: '*', name: 'files', useDefaultExcludes: false
                    }
                }
            }
        }
		stage('build') {
			agent {
				label 'myagent'
			}
			steps {
				dir ('cicd') {	
				unstash 'files'
				sh "docker build . -t  experiment:${BuildVersion}"
				}	
			}

		}
		stage('Git Tag In proccess') {
			agent {
				label 'myagent'
			}
			steps {
				dir ('cicd') {
					def gitLib = load "git_push_ssh.groovy"
					gitLib.pushSSH(commitMsg: "Jenkins build #${BuildVersion}", tagName: "build-experiment:${BuildVersion}", files: "*.*");				
				}	
			}

		}
		stage('Get ip from user') {
			agent {
				label 'master'
			}
            steps {
                dir ('elastic_centos/'){
                script { 
                targetIP = input(
                            id: 'userInput', message: 'ip add',
                            parameters: [
                                string(defaultValue: '10.0.0.32',
                                       description: 'ip address',
                                       name: 'IP')])
                    }
				}
			}
		}
	}
}